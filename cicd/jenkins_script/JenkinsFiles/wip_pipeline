#!/bin/groovy

JOB_ID = "WIP"
T_JOB_ID = JOB_ID
ALL_USER_NAME = USER_NAME
USER_NAME = USER_NAME.split(",")[0].replaceAll(/@.*/,"")

if (UNITTESTS != 'default' || INTEGRATION != 'default') {
    currentBuild.displayName = "#${currentBuild.number}(${MACHINE}) ${USER_NAME} WIP: " +
      " customized for ${UNITTESTS} & ${INTEGRATION} & ${PARAM}"
} else {
    currentBuild.displayName = "#${currentBuild.number}(${MACHINE}) ${USER_NAME} WIP: ${PARAM}"
}

load("mit/jenkins_script/JenkinsFiles/src/init.groovy")

timestamps {
  wrap([$class: 'AnsiColorBuildWrapper']) {
    def start_t = new Date()

    try {
      UTIL = load("mit/jenkins_script/JenkinsFiles/src/util.groovy")
      UTIL.init()
      STAGE = load("mit/jenkins_script/JenkinsFiles/src/stage.groovy")
    } catch (java.lang.Throwable error) {
      println "exception caught:"
      println error.getMessage()
      throw error
    }

    try {
      UTIL.pre_pipeline()

      STAGE.stage_validate()
      currentBuild.displayName = currentBuild.displayName.replaceAll("WIP:", "${BASE_BRANCH} WIP:")
      if (BUILD_ONLY == "gen_download") {
        BUILD_ONLY="release"
        package_url=""
        STAGE.stage_gen_download()
      } else {
        UTIL.before_test()
        STAGE.stage_build_pkg()
        STAGE.stage_parallel_testing()
      }
    } catch(err) {
      STAGE.once_failed(err)
      throw err
    }
    STAGE.once_success(start_t, 'WIP Test passed!')
  }
}
